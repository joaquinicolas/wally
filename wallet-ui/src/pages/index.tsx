import Head from "next/head";
import React, { useEffect, useState } from "react";
import Grid from "@mui/material/Grid";
import Paper from "@mui/material/Paper";
import { Inter } from "next/font/google";
import CurrencySelector from "@/components/currentcySelector";
import Alert from "@mui/material/Alert";
import PriceEditor from "@/components/priceEditor";
import Header from "@/components/header";
import WalletAddressManager from "@/components/walletManager";
import Footer from "@/components/footer";
import { fetchRates, fetchWalletData } from "@/services/wallet";

interface Wallet {
  address: string;
  isOld: boolean;
  balance: number;
}

interface Rate {
  currency: string;
  rate: number;
}

const inter = Inter({ subsets: ["latin"] });
export default function Home() {
  const [amount, setAmount] = useState(0.0);
  const [rates, setRates] = useState<Rate[]>([]);
  const [currency, setCurrency] = useState("USD");
  const [wallet, setWallet] = useState({
    address: "",
    isOld: false,
    balance: 0,
  } as Wallet);
  const [address, setAddress] = useState("");

  useEffect(() => {
    if (address === "") {
      return;
    }
    fetchWalletData(address)
      .then((w) => {
        if (w) {
          setWallet({ address: w.address, balance: w.balance, isOld: w.isOld });
        }
      })
      .then(() => fetchRates())
      .then((rates) => {
        if (rates && Array.isArray(rates) && rates.length > 0) {
          setRates(rates);
        }
      });
  }, [address]);

  useEffect(() => {
    const rate = rates.find((r) => r.currency === currency);
    setAmount((val) => val / (rate ? rate.rate : 1));
  }, [rates, currency]);

  return (
    <>
      <Head>
        <title>Wally</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        style={{ display: "flex", flexDirection: "column", minHeight: "100vh" }}
      >
        <Header />
        <div style={{ padding: "16px", flexGrow: 1 }}>
          {wallet.isOld ? (
            <Alert severity="warning" style={{ marginBottom: "16px" }}>
              This wallet is old
            </Alert>
          ) : null}
          <Grid container spacing={4} alignItems="stretch">
            <Grid item xs={6}>
              <PriceEditor
                priceAmount={wallet.balance.toString()}
                setPriceAmount={(newBalance) =>
                  setWallet({ ...wallet, balance: +newBalance })
                }
              />
            </Grid>
            <Grid item xs={6}>
              <CurrencySelector
                currency={currency}
                setCurrency={setCurrency}
                priceAmount={amount.toString()}
              />
            </Grid>
            <Grid item xs={12}>
              <WalletAddressManager onFavoriteChanged={setAddress} />
            </Grid>
          </Grid>
        </div>
        <Footer />
      </div>
    </>
  );
}
